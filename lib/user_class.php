<?php
/**
 * Created by PhpStorm.
 * User: Трик
 * Date: 09.07.2016
 * Time: 20:12
 */

require_once "global_class.php";

class User extends GlobalClass
{
    public function __construct($db)
    {
        parent::__construct("users", $db);
    }

    public function addUser ($login, $password, $name, $email, $contact, $access_lvl) {
        if (!$this->checkValid($login, $password, $name, $email)) return false;        
        return $this->add(array("login" => $login, "password" => $password, "name" => $name, "email" => $email, "access_lvl" => $access_lvl, "contact" => $contact));
    }

    public function editUser ($id, $login, $password, $name, $email, $contact, $trust = 0) {
        if (!$this->checkValid($login ,$password, $name, $email)) return false;
        return $this->edit($id, array("password" => $password, "name" => $name, "email" => $email, "contact" => $contact, "trust" => $trust));
    }

    public function isExistsUser($login) {
        return $this->isExists("login", $login);
    }

    public function checkUser ($login, $password) {
        $user = $this->getUserOnLogin($login);
        if (!$user) return false;
        return $user["password"] === $password;
    }

    public function getFieldOnID($id, $field)
    {
        return $this->getFieldToID($id, $field); // TODO: Change the autogenerated stub
    }

    public function getUserOnLogin ($login) {
        $id = $this->getField("id", "login", $login);
        return $this->get($id);
    }

    public function getAccessLvlOnId($id) {
        return $this->getField("access_lvl", "id", $id);
    }

    private function checkValid ($login, $hash, $name, $email) {
        if(!$this->valid->validLogin($login)) return false;
        if(!$this->valid->validHash($hash)) return false;
        if(!$this->valid->validName($name)) return false;
        if(!$this->valid->validEmail($email)) return false;
        return true;
    }

    public function addFavorite($id, $value){
        return $this->edit($id, array("favorites_obj" => $value));
    }

    public function getFavoritesOnId($id){
        return $this->getField("favorites_obj", "id", $id);
    }

    public function deleteFavorite($id, $value){
        return $this->edit($id, array("favorites_obj" => $value));
    }

    public function getAllFavoritesOnUser($id) {
        $favoritesString = $this->getField("favorites_obj", "id", $id);
        if ($favoritesString != "") {
            return explode(",", $favoritesString); 
        } else {
            return false;
        }
        
    }
}